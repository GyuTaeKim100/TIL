//생각해보자
//해당 코드에서 함수로 문자열 분할 안 할 경우의 문제점은??




// 4 translate FROM_ENG.cpp: 콘솔 응용 프로그램의 진입점을 정의합니다.
//

#include "stdafx.h"

#include <string.h>

#include "STRING_PROCESS.h"


/*------------------------------------------------------------------------------
	버퍼 설정 

	:입력 버퍼 사이즈 설정
	:출력 버퍼는 입력 버퍼의 최소 2배로 설정( 예 영-> 한글 ) 
------------------------------------------------------------------------------*/
typedef enum BUF_SETTING
{
	//입력 버퍼 크기
	INPUT_BUF_SZ = 500,
	
	//출력 버퍼 크기
	OUTPUT_BUF_SZ = INPUT_BUF_SZ *2

}BUF_SETTING;



/*------------------------------------------------------------------------------
	문자와 문자열의 길이 설정 및 사전 설정
------------------------------------------------------------------------------*/
typedef enum TRANS_OPTION
{
	
									//총 번역 가능 단어 갯수
									AVAILABLE_TRANS_WORD_CNT = 2,	

									//영어 문자열 최대 길이
									MAX_ENG_STRING_LENGTH = (INPUT_BUF_SZ - 1),

									//한글 문자열 최대 길이
									MAX_KOR_STRING_LENGTH = ((INPUT_BUF_SZ / 2) - 1),

									//영어 단어 최대 길이
									MAX_ENG_WORD_LENGTH = 30 - 1,

									//한글 단어 최대 문자열 길이
									MAX_KOR_WORD_LENGTH = (MAX_ENG_WORD_LENGTH / 2)

}TRANS_OPTION;



/*------------------------------------------------------------------------------
	번역 대상 언어 설정 
------------------------------------------------------------------------------*/
typedef enum FROM_LANG
{
	FROM_ENG = 0,
	FROM_KOR = 1
	
}FROM_LANG;



/*------------------------------------------------------------------------------
	번역 언어 설정
------------------------------------------------------------------------------*/
typedef enum INTO_LANG
{
	TO_ENG = 0,
	TO_KOR = 1

}INTO_LANG;



int main()
{



	/*------------------------------------------------------------------------------
		통계 정보 변수 선언
	------------------------------------------------------------------------------*/
	//총 입력된 단어 수
	int totalInputWordCnt = 0;

	//번역 실패한 단어 수 
	int failTransCnt = 0;



	/*------------------------------------------------------------------------------
		사전 배열 초기화

		:추후에 텍스트 파일로 읽게 제작
	------------------------------------------------------------------------------*/
	char dicArr[AVAILABLE_TRANS_WORD_CNT][2][MAX_KOR_WORD_LENGTH * 2] =
	{
		{ "boy", "소년" },
		{ "girl", "여자" },
	};
		//사용 예
	//	puts(dicArr[1][1]);  -->여자 출력



	/*------------------------------------------------------------------------------
		번역  설정 변수
	------------------------------------------------------------------------------*/
	FROM_LANG selInputLang = FROM_KOR;
	INTO_LANG selOutLang = TO_ENG;
	char tmp = 0;



	/*------------------------------------------------------------------------------
		메뉴 출력1

		:번역 대상 언어 선택
		
		@추후에 언어가 늘면 번역 언어도 같이 입력 받게 제작 할 것! 
	------------------------------------------------------------------------------*/
	while (true)
	{
		puts("[메뉴]번역 대상 선택");
		puts("	(1)영어");
		puts("	(2)한글");

		printf("[입력] <<");
		scanf_s("%c", &tmp);

		//영어 -> 한글
		if (tmp == '1')
		{
			selInputLang = FROM_ENG;
			selOutLang = TO_KOR;
			break;
		}

		//한글 -> 영어
		else if (tmp == '2')
		{
			selInputLang = FROM_KOR;
			selOutLang = TO_ENG;
			break;
		}

		//버퍼 비우기
		//	개행 문자 제거
		while( tmp != '\n')
			scanf_s("%c", &tmp);

		//엔터 출력
		puts("");
	}

	//버퍼 비우기
	//	개행 문자 제거
	while (tmp != '\n')
		scanf_s("%c", &tmp);



	/*------------------------------------------------------------------------------
		입력 버퍼 배열 선언

		:번역 대상 문자열 입력 받음
		:키보드로 값 채움
	------------------------------------------------------------------------------*/
	char inputString[INPUT_BUF_SZ] = { '\0' };



	/*------------------------------------------------------------------------------
		gets_s 주의점
		
		:입력 받을 문자열 길이를 미리 알 수 없다
		:에러 시 프로그램에게 에러 띄움
	    :결론 윈도우즈 입력을 이용해야 한다
	------------------------------------------------------------------------------*/



	/*------------------------------------------------------------------------------
		번역 할 문자열 입력 
		
		
		:번역 대상 언어의 종류에 따라 주의사항 출력이 다르다
		:번역 대상 언어의 종류에 따라 문자의 크기가 다르므로 입력 배열 총 크기에 주의 
	------------------------------------------------------------------------------*/
	//번역 대상 언어가 한글인 경우
	if (selInputLang ==  FROM_KOR)
	{
		printf_s("[주의1]문장 내 모든 한글 문장 길이는 %d 자리 이하로 입력하세요\n", MAX_ENG_WORD_LENGTH);
		printf_s("[주의2]%d자 이하의 한글을 입력해주세요(끝 : 엔터)\n:", INPUT_BUF_SZ/2 );

		//번역할 문장 입력
		//	바로 엔터치면 0인덱스 요소부터 NULL
		gets_s(inputString, INPUT_BUF_SZ/2);

	}

	//번역 대상 언어가 한글인 경우
	//한글은 2바이트 사용
	if (selInputLang == FROM_ENG)
	{
		printf_s("[주의1]문장 내 모든 영어 단어의 길이는 %d 자리 이하로 입력하세요\n", MAX_KOR_WORD_LENGTH);
		printf_s("[주의2]%d자 이하의 영어을 입력해주세요(끝 : 엔터)\n:", INPUT_BUF_SZ);


		//번역할 문장 입력
		//	바로 엔터치면 0인덱스 요소부터 NULL
		gets_s(inputString, INPUT_BUF_SZ );
	}



	/*------------------------------------------------------------------------------
		안내 문구 출력

		:영어 문자는 자동 소문자 변환 함을 알리는 문구
	------------------------------------------------------------------------------*/
	printf_s("\n[자동 변환] <<자동으로 소문자 변환이 이루어 집니다>>\n");



	/*------------------------------------------------------------------------------
		문자열 분할에 이용하는 변수 및 플래그 선언
	------------------------------------------------------------------------------*/
	//분할 단어 변수 
	char wordSplit[MAX_ENG_WORD_LENGTH] = { '\0' };


	//분할 된 단어 길이 == wordSplit에 저장된 단어의 문자 갯수
	int wordLength = 0;


	//번역된 문자열 배열
	char resultString[OUTPUT_BUF_SZ] = { '\0' };


	//단어 별 번역 단어검색 플래그
	//	성공시 true
	//	실패시 false
	bool flagSuccessSearch = false;


	//모든 단어 번역 성공 여부
	//	성공시 true
	//  실패시 false
	bool flagSuccessAllTrans = true;


	//번역 중간 과정 문자열
	char midString[MAX_KOR_WORD_LENGTH] = { '\0' };


	//번역 단어 배열 인덱스
	int dicCheck = 0;


	//참고
	//	scanf로 %s로 입력 받을 시 문자열 형식으로 입력받아서 마지막에 널문자가 삽입된다



	/*------------------------------------------------------------------------------
	입력 받은 문자열 길이 구하기
	------------------------------------------------------------------------------*/
	int inputLength = 0;
	inputLength = strlen(inputString);



	/*------------------------------------------------------------------------------
	입력 받은 문자열을 전부 소문자로 변경
	------------------------------------------------------------------------------*/
	for (int i = 0; i < inputLength; i++)
	{
		ToLowerAlphabet(&inputString[i]);
	}

	

	/*------------------------------------------------------------------------------------------------
	단어 추출에 필요한 변수 선언 및 초기화
	------------------------------------------------------------------------------------------------*/
	int sz=0;
	int	searchOffSet = 0;

	int saveOffSet = 0;

	int i = 0;
	int len = 0;

	int resultLen = 0;



	/*------------------------------------------------------------------------------------------------
	입력 받은 문자열(번역 대상)에서 단어 단위 추출 및 번역 작업

	:문자열 분할 시 offset기준 문자열(널, 개행, 공백 제외) 까지의 size로 번역 대상 단어 추출
	:번역 대상 단어를 사전 배열에서 검색
	-있으면 번역 단어로 교체
	-없으면 번역 대상 단어 그대로 사용
	------------------------------------------------------------------------------------------------*/
	while (	 searchOffSet < inputLength )
	{

		//번역 대상 문자열에서 문자 분할
		//	한 개의 단어는 searchOffSet부터 sz까지 
		if ( !SplitString(inputString, inputLength, searchOffSet, &sz))
		{
			//오류 발생
			//프로그램 중지
			
		}

		//번역 대상 문자열의 단어 갯수 증가
		totalInputWordCnt++;

		i = 0;

		//문자 단위 복사
		//	위 절차에 의해 searchOffSet부터 sz까지 바이트 복사 
		for (i = 0; i < sz; i++)
			midString[i] = inputString[searchOffSet + i];

		dicCheck = 0;

		//공백, 개행, 붙임
		midString[sz] = '\0';


		//번역 대상 단어 검색
			for (dicCheck = 0; dicCheck < AVAILABLE_TRANS_WORD_CNT; dicCheck++)
			{//번역 할 단어를 찾은 경우
				if (strcmp(dicArr[dicCheck][selInputLang], midString) == 0)
				{
					flagSuccessSearch = true;
					break;
				}
			}
		

		//번역 할 단어를 찾은 경우
		if (flagSuccessSearch == true)
		{

			len = strlen(dicArr[dicCheck][selOutLang]);

			//사전 단어 복사
			strcpy_s(midString, dicArr[dicCheck][selOutLang] );


			//공백, 개행, 붙임
			midString[ len ] = inputString[searchOffSet + sz];


			//널 문자 붙이기
			midString[ len + 1] = '\0';

			

		}
		//번역 할 단어를 찾지 못한 경우
		else
		{
			len = strlen(midString);
			
			//공백, 개행 붙임
			midString[ len ] = inputString[searchOffSet + sz];

			//널 문자 붙임
			midString[ len + 1] = '\0';

			//모든 단어 번역 여부 플래그
			flagSuccessAllTrans = false;

			//번역 실패 단어 갯수 증가
			failTransCnt++;
		}

		
		//번역 출력 스트링에 붙이기
		strcat_s(resultString, midString);

		//오프셋 갱신
		//	sz+1은 널+ 공백 개행 문자
		searchOffSet += (sz +1);

		//플래그 초기화
		flagSuccessSearch = false;
	}



	/*------------------------------------------------------------------------------------------------
	단어 번역 관련 통계 출력

	:모든 단어가 번역 되었는가
	:번역 한 단어의 갯수
	:번역 실패시 실패한 갯수
	------------------------------------------------------------------------------------------------*/
	//모든 단어 번역 여부
	//	번역 통계 출력
	if (flagSuccessAllTrans == true)
	{
		if (totalInputWordCnt == 0)
			printf("[번역 정보] <<단어가 입력되지 않았습니다>>\n\n#");
		else
			printf("[번역 정보] <<모든 단어(%d개) 번역 성공>>\n\n#", totalInputWordCnt);
	}
	else
		printf("[번역 정보] <<%d개의 단어 중 %d 개의 단어가 번역에 실패하였습니다>>\n\n[번역]#", totalInputWordCnt, failTransCnt);



	/*------------------------------------------------------------------------------------------------
	번역 문자열 출력

	:마지막에 널 부착 후 출력
	------------------------------------------------------------------------------------------------*/
	//출력 배열을 문자열화
	//	번역 된 문자 배열의 마지막 인덱스에 null 부착
	resultString[strlen(resultString)] = '\0';
	puts(resultString);



	/*------------------------------------------------------------------------------------------------
	버퍼 관련 정보 출력

	:번역 전 총 문자열 바이트
	:번역 후 문자열 바이트
	:총 버퍼 공간
	:남은 버퍼 공간
	------------------------------------------------------------------------------------------------*/
	printf("\n\n<<번역 전 총 문자열 바이트: %d>>\n", strlen(inputString));
	printf("<<번역 후 총 문자열 바이트: %d>>\n", strlen(resultString));
	printf("<<총 버퍼 공간: %d>>\n", INPUT_BUF_SZ);
	printf("<<남은 버퍼 공간: %d>>\n", INPUT_BUF_SZ - strlen(resultString));

	while (true);


	return 0;


}

