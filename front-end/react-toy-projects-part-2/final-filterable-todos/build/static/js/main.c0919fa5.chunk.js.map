{"version":3,"sources":["components/Todos/enums.ts","components/TodosTemplate/index.ts","components/TodosTemplate/TodosTemplate.tsx","components/InsertTodo/InsertTodo.tsx","components/InsertTodo/index.ts","components/MultiSelectChips/MultiSelectChips.tsx","components/MultiSelectChips/index.ts","components/FilterTodos/index.ts","components/FilterTodos/FilterTodos.tsx","components/TodoItem/TodoItem.tsx","components/TodoItem/index.ts","components/TodoItemList/index.ts","components/TodoItemList/TodoItemList.tsx","components/Todos/Todos.tsx","components/Todos/index.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["todoPriorityEnum","todoStatusEnum","filterRuleEnum","TodosTemplate","form","filter","children","className","defaultFormLevelStatus","VERY_IMPORTANT","TodoForm","onInsert","useState","content","setContent","priority","handleSetPriority","onSubmit","e","preventDefault","placeholder","value","onChange","target","Object","values","map","index","type","MultiSelectChips","allKeys","selectedKeys","onReset","isToggledAllOn","length","getChipClassNameBy","onClick","ResetChip","isActiveState","Set","has","eventTargetValue","prevSelectedKeysAsSet","nextSlectedKeysAsSet","clear","add","isToggledOn","canSwitchToggle","size","delete","result","Array","from","FilterTodos","filterTodosRules","onHandleFilter","prioritySet","statusSet","handleFilterRulesBy","keyBasedRule","nextFilterTodosRules","assign","renderPriortyChips","renderTodoStatusChips","TodoItem","todoData","onHandleUpdateTodoItem","todoStatus","upsertDate","isEditMode","setIsEdmitMode","setPriority","upsertDateAsFormmatedText","format","isDone","DONE","useEffect","handleToggleMode","extraContentClassName","checked","nextDoneStatus","PROGRESS","updateTodoData","React","memo","TodoItemList","todosData","defaultFilterTodosRules","Todos","setTodosData","setFilterTodosRules","nextIdRef","useRef","filteredTodosDatas","insertFormFieldsValue","dayjs","newTodoData","id","nextId","current","nextTodosData","element","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c0919fa5.chunk.js","sourcesContent":["export enum todoPriorityEnum {\n  VERY_IMPORTANT = '매우 중요',\n  IMPORTANT = '중요',\n  NORMAL = '보통',\n}\n\nexport enum todoStatusEnum {\n  DONE = '완료',\n  PROGRESS = '미완료',\n}\n\nexport enum filterRuleEnum {\n  PRIORITY_VALUES = 'prioritySet',\n  TODO_STATUS_VALUES = 'statusSet',\n}\n","import TodosTemplate from './TodosTemplate'\nexport default TodosTemplate\n","import './todosTemplate.css'\n\n// filter, form은 Todo list 기능 다형성(form 없는 readonly todos 또는 filter 없는 todos 등) 을 위해 필수값은 아니다 \ninterface IProps {\n    form: React.ReactNode | undefined | null,\n    filter: React.ReactNode | undefined | null,\n    children: React.ReactNode\n}\n\nconst TodosTemplate = ({ form, filter, children }: IProps) => {\n    return <div className=\"todos-template\">\n        <header className=\"fixible-todos-header\">\n            {form}\n        </header>\n        <div className=\"scrollable-todos-body\">\n            {filter}\n            {children}\n        </div>\n    </div>\n}\n\nexport default TodosTemplate\n\n","import './insertTodo.css'\n\nimport { useState } from 'react'\nimport { TInsertFormFieldsValue } from '../Todos/types'\nimport { todoPriorityEnum } from '../Todos/enums'\n\nconst inputPlaceholder = '할 일을 입력하세요. 값이 없는 경우 추가가 되지 않습니다'\nconst defaultFormLevelStatus = todoPriorityEnum.VERY_IMPORTANT\n\nconst defaultContent = ''\n\nexport interface IProps {\n    onInsert: (formFieldsValue: TInsertFormFieldsValue) => void\n}\n\nconst TodoForm = ({ onInsert }: IProps) => {\n    const [content, setContent] = useState(defaultContent)\n    const [priority, handleSetPriority] = useState<todoPriorityEnum>(defaultFormLevelStatus)\n\n    const handleChangeContent = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setContent(e.target.value)\n    }\n\n    const handleChangePriority = (e: React.ChangeEvent<HTMLSelectElement>) => {\n        const priority = e.target.value as todoPriorityEnum\n        handleSetPriority(priority)\n    }\n\n    const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n        e.preventDefault()\n\n        const fieldsValue: TInsertFormFieldsValue = {\n            content, priority\n        }\n\n        const isFieldValidating = (function getIsFieldValidating() {\n            if (content === defaultContent) {\n                return false\n            } else {\n                return true\n            }\n        })()\n\n\n        if (!isFieldValidating) {\n            return\n        } else {\n            onInsert(fieldsValue)\n        }\n\n        (function resetFormFields() {\n            setContent(defaultContent)\n            handleSetPriority(defaultFormLevelStatus)\n        })()\n    }\n\n    return <div\n        className=\"add-todo-form-container\"\n        data-testid='insert-todo'\n    >\n        <form\n            className='add-todo-form'\n            onSubmit={handleSubmit}>\n            <div className=\"form-field-items-container\">\n                <div className='col center'>\n                    <div className='row center'>\n                        <select\n                            className='form-field-item priority-select ml-10'\n                            data-testid=\"priority-select\"\n                            placeholder='중요도'\n                            value={priority}\n                            onChange={handleChangePriority}\n                        >\n                            {\n                                Object.values(todoPriorityEnum).map((value, index) => {\n                                    return <option\n                                        key={index}\n                                        data-testid=\"priority-select-option\"\n                                        value={value}\n                                    >\n                                        {value}\n                                    </option>\n                                })\n                            }\n                        </select>\n                    </div>\n                    <input\n                        className='form-field-item content-input border-none'\n                        data-testid=\"content-input\"\n                        placeholder={inputPlaceholder}\n                        value={content}\n                        onChange={handleChangeContent}\n                    />\n                    <button\n                        className='form-field-item submit-button'\n                        data-testid=\"submit-button\"\n                        type=\"submit\">추가</button>\n                </div>\n            </div>\n        </form>\n    </div>\n}\n\nexport default TodoForm","import TodoForm from './InsertTodo'\n\nexport default TodoForm\n","import './multiSelectChips.css'\n\nexport interface IProps {\n    allKeys: Array<string>\n    selectedKeys: Array<string>\n    onChange: (nextSlectedKeysAsSet: Array<string>) => void\n    onReset: () => void\n}\n\nconst MultiSelectChips = ({ allKeys, selectedKeys, onChange, onReset }: IProps) => {\n    const isToggledAllOn = allKeys.length === selectedKeys.length\n\n    const ResetChip = () => {\n        const handleClick = () => {\n            onReset()\n        }\n\n        const className = getChipClassNameBy(isToggledAllOn)\n\n        return <button\n            className={className}\n            data-testid='multi-select-chip'\n            onClick={handleClick}>모두</button>\n\n    }\n\n    const Chips = () => {\n        return allKeys.map((value, index) => {\n            const isActiveState = new Set(selectedKeys).has(value)\n            const isFinalActiveState = !isToggledAllOn && isActiveState\n            const className = getChipClassNameBy(isFinalActiveState)\n\n            return <button\n                className={className}\n                key={index}\n                data-testid='multi-select-chip'\n                onClick={() => {\n                    const eventTargetValue = value\n                    const prevSelectedKeysAsSet = new Set(selectedKeys)\n                    const nextSlectedKeysAsSet = new Set(prevSelectedKeysAsSet)\n\n                    if (isToggledAllOn) {\n                        nextSlectedKeysAsSet.clear()\n                        nextSlectedKeysAsSet.add(eventTargetValue)\n                    } else {\n                        const isToggledOn = prevSelectedKeysAsSet.has(eventTargetValue)\n                        const canSwitchToggle = prevSelectedKeysAsSet.size > 1\n\n                        if (isToggledOn && canSwitchToggle) {\n                            nextSlectedKeysAsSet.delete(eventTargetValue)\n                        } else {\n                            nextSlectedKeysAsSet.add(eventTargetValue)\n                        }\n                    }\n\n                    const result = Array.from(nextSlectedKeysAsSet)\n                    onChange(result)\n                }}\n            >{value} </button>\n        })\n    }\n\n    return <div\n        className=\"multi-select-chips\"\n        data-testid='multi-select-chips'>\n        {ResetChip()}\n        {Chips()}\n    </div>\n}\n\nexport default MultiSelectChips\n\nconst getChipClassNameBy = (isActiveState: boolean) => {\n    const baseClassName = 'chip'\n\n    return `${baseClassName} ${isActiveState ? 'toggled' : ''}`\n}","import MultiSelectChips from './MultiSelectChips'\nexport default MultiSelectChips\n","import FilterTodos from './FilterTodos'\nexport default FilterTodos\n","import './filterTodos.css'\n\nimport { todoPriorityEnum, todoStatusEnum } from '../Todos/enums'\nimport { TFilterTodosRules } from '../Todos/types'\nimport MultiSelectChips from '../MultiSelectChips'\n\nexport interface IProps {\n    filterTodosRules: TFilterTodosRules\n    onHandleFilter: (nextFilterTodosRules: TFilterTodosRules) => void\n}\n\nconst FilterTodos = ({ filterTodosRules, onHandleFilter }: IProps) => {\n    const { prioritySet, statusSet } = filterTodosRules\n\n    const handleFilterRulesBy = ({ keyBasedRule, selectedKeys }: any) => {\n        const nextFilterTodosRules: TFilterTodosRules = Object.assign(filterTodosRules, {\n            [keyBasedRule]: new Set(selectedKeys)\n        })\n        onHandleFilter(nextFilterTodosRules)\n    }\n\n    const renderPriortyChips = () => {\n        const keyBasedRule = 'prioritySet'\n\n        const handleChange = (selectedKeys: any) => {\n            handleFilterRulesBy({\n                keyBasedRule,\n                selectedKeys\n            })\n        }\n\n        const handleReset = () => {\n            const selectedKeys = [...Object.values(todoPriorityEnum).map(value => value)]\n            handleFilterRulesBy({\n                keyBasedRule,\n                selectedKeys\n            })\n        }\n\n        const allKeys = Array.from(Object.values(todoPriorityEnum))\n        const selectedKeys = Array.from(prioritySet)\n\n        return <MultiSelectChips\n            allKeys={allKeys}\n            selectedKeys={selectedKeys}\n            onChange={handleChange}\n            onReset={handleReset}\n        />\n    }\n\n    const renderTodoStatusChips = () => {\n        const keyBasedRule = 'statusSet'\n        const handleChange = (selectedKeys: any) => {\n            handleFilterRulesBy({\n                keyBasedRule,\n                selectedKeys\n            })\n        }\n\n        const handleReset = () => {\n            const selectedKeys = [...Object.values(todoStatusEnum).map(value => value)]\n            handleFilterRulesBy({\n                keyBasedRule,\n                selectedKeys\n            })\n        }\n\n        const allKeys = Array.from(Object.values(todoStatusEnum))\n        const selectedKeys = Array.from(statusSet)\n\n        return <MultiSelectChips\n            allKeys={allKeys}\n            selectedKeys={selectedKeys}\n            onChange={handleChange}\n            onReset={handleReset}\n        />\n    }\n\n    return <div\n        className=\"filter-todos\"\n        data-testid=\"filter-todos\">\n        {renderPriortyChips()}\n        {renderTodoStatusChips()}\n    </div>\n}\n\nexport default FilterTodos\n","import React, { useState, useEffect } from 'react'\nimport { TTodoData } from '../Todos/types'\nimport { todoStatusEnum, todoPriorityEnum } from '../Todos/enums'\nimport './todoItem.css'\n\nconst inputPlaceholder = '할 일을 입력하세요. 값을 입력하지 않은 경우 수정이 완료되지 않습니다'\n\nexport interface IProps {\n    todoData: TTodoData\n    onHandleUpdateTodoItem: (values: TTodoData) => void\n}\n\nconst TodoItem = ({ todoData, onHandleUpdateTodoItem }: IProps) => {\n    const { todoStatus, upsertDate } = todoData\n    const [isEditMode, setIsEdmitMode] = useState(false)\n\n    const [content, setContent] = useState(todoData.content)\n    const [priority, setPriority] = useState(todoData.priority)\n\n    const upsertDateAsFormmatedText = upsertDate.format('YYYY-MM-DD')\n    const isDone = todoStatusEnum.DONE === todoStatus\n\n    useEffect(() => {\n        (function updateStates() {\n            const { content, priority } = todoData\n            setContent(content)\n            setPriority(priority)\n        })()\n    }, [todoData])\n\n    const handleChangeContent = (e: React.ChangeEvent<HTMLInputElement>) => {\n        setContent(e.target.value)\n    }\n\n    const handleChangePriority = (e: React.ChangeEvent<HTMLSelectElement>) => {\n        setPriority(e.target.value as todoPriorityEnum)\n    }\n\n    const handleToggleCheckBox = () => {\n        const nextDoneStatus = isDone ? todoStatusEnum.PROGRESS : todoStatusEnum.DONE\n        const updateTodoData = {\n            ...todoData,\n            todoStatus: nextDoneStatus\n        }\n        onHandleUpdateTodoItem(updateTodoData)\n    }\n\n    const handleToggleMode = () => {\n        setIsEdmitMode((isEditMode) => !isEditMode)\n    }\n\n    const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\n        e.preventDefault()\n\n        const isFieldValidating = (function getIsFieldValidating() {\n            if (content === '') {\n                return false\n            }\n            return true\n        })()\n\n        if (!isFieldValidating) {\n            return\n        }\n\n        const updateTodoData = {\n            ...todoData,\n            content,\n            priority\n        }\n\n        onHandleUpdateTodoItem(updateTodoData)\n        handleToggleMode()\n    }\n\n    const extraContentClassName = (function getExtraContentClassName() {\n        return isDone ? 'todo-done' : ''\n    })()\n\n    return <li\n        className={`todo-item`}\n        data-testid='todo-item'>\n        <div className='check-done-wrapper' >\n            <input\n                className=\"check-done\"\n                data-testid='check-done'\n                type='checkbox'\n                checked={isDone}\n                onChange={handleToggleCheckBox} />\n        </div>\n        {\n            isEditMode ? <form\n                className=\"edit-todo-form\"\n                data-testid='edit-todo-form'\n                onSubmit={handleSubmit}>\n                <div className=\"form-field-items-container\">\n                    <select\n                        className='form-field-item priority-select mb-10'\n                        data-testid='priority-select'\n                        placeholder='중요도'\n                        value={priority}\n                        onChange={handleChangePriority}>\n                        {\n                            Object.values(todoPriorityEnum).map((value, index) => {\n                                return <option\n                                    data-testid='priority-select-option'\n                                    key={index}\n                                    value={value}>{value}</option>\n                            })\n                        }\n                    </select>\n\n                    <div className='col'>\n                        <input\n                            className='form-field-item content-input'\n                            data-testid='content-input'\n                            placeholder={inputPlaceholder}\n                            value={content}\n                            onChange={handleChangeContent} />\n                        <button\n                            className='form-field-item submit-button'\n                            data-testid='submit-button'\n                            type='submit'>수정</button>\n                    </div>\n                </div>\n            </form> :\n                <article\n                    className='detail-items'\n                    data-testid='detail-items'\n                    onClick={handleToggleMode}>\n                    <div className=\"detail-item\">\n                        <label className='detail-label' >중요도 :</label>\n                        <em\n                            className='detail-content'\n                            data-testid='importance'>{priority}</em>\n                    </div>\n\n                    <div className=\"detail-item\">\n                        <label className='detail-label' >추가일 :</label>\n                        <em\n                            className='detail-content'\n                            data-testid='date'>{upsertDateAsFormmatedText}</em>\n                    </div>\n\n                    <div className=\"detail-item\">\n                        <h5\n                            className={`detail-content ${extraContentClassName}`}\n                            data-testid='content'>{content}</h5>\n                    </div>\n                </article>\n        }\n    </li>\n}\n\nexport default React.memo(TodoItem)","import TodoItem from './TodoItem'\nexport default TodoItem\n","import TodoItemList from './TodoItemList'\nexport default TodoItemList\n","import TodoItem from '../TodoItem'\nimport { TTodoData } from '../Todos/types'\nimport './todoItemList.css'\n\nexport interface IProps {\n    todosData: Array<TTodoData>\n    onHandleUpdateTodoItem: (values: TTodoData) => void\n}\n\nconst TodoItemList = ({ todosData, onHandleUpdateTodoItem }: IProps) => {\n    return <ul\n        className='todo-item-list'\n        data-testid='todo-item-list'>\n        {\n            todosData.map((todoData, index) => {\n                return <TodoItem\n                    key={index}\n                    todoData={todoData}\n                    onHandleUpdateTodoItem={onHandleUpdateTodoItem} />\n            })\n        }\n    </ul>\n}\n\nexport default TodoItemList","import { useState, useRef } from 'react'\n\nimport dayjs from 'dayjs'\n\nimport { TTodoData, TInsertFormFieldsValue, TFilterTodosRules } from './types'\nimport { todoPriorityEnum, todoStatusEnum } from './enums'\n\nimport TodosTeplate from \"../TodosTemplate\"\nimport InsertTodo from '../InsertTodo'\nimport FilterTodos from '../FilterTodos'\nimport TodoItemList from '../TodoItemList'\n\nconst DEFAULT_TODO_ID = 0\n\nconst defaultFilterTodosRules: TFilterTodosRules = {\n    prioritySet: new Set([...Object.values(todoPriorityEnum).map(value => value)]), // 중요도 '모두' 초기화\n    statusSet: new Set([...Object.values(todoStatusEnum).map(value => value)]) // 상태 '모두' 초기화\n}\n\nconst Todos = () => {\n    const [todosData, setTodosData] = useState<Array<TTodoData>>([])\n    const [filterTodosRules, setFilterTodosRules] = useState<TFilterTodosRules>(defaultFilterTodosRules)\n    const nextIdRef = useRef(DEFAULT_TODO_ID)\n\n    const handleFilter = ({ statusSet, prioritySet }: TFilterTodosRules) => {\n        const nextFilterTodosRules = {\n            statusSet: statusSet,\n            prioritySet: prioritySet\n        }\n        setFilterTodosRules(nextFilterTodosRules)\n    }\n\n    const handleUpdateTodoItem = ({ id, todoStatus, content, priority }: TTodoData) => {\n        const nextTodosData = todosData.map((element) => {\n            const isTarget = element.id === id\n            if (isTarget) {\n                const upsertDate = dayjs()\n                return {\n                    ...element,\n                    todoStatus,\n                    priority,\n                    content,\n                    upsertDate\n                }\n            } else {\n                return { ...element }\n            }\n        })\n        setTodosData(nextTodosData)\n    }\n\n    const handleInsert = (insertFormFieldsValue: TInsertFormFieldsValue) => {\n        const content = insertFormFieldsValue.content\n        const priority = insertFormFieldsValue.priority as todoPriorityEnum\n        const upsertDate = dayjs()\n\n        const id = (function getNextId() {\n            const nextId = nextIdRef.current\n            nextIdRef.current++\n            return nextId\n        })();\n\n        const newTodoData: TTodoData = {\n            id,\n            todoStatus: todoStatusEnum.PROGRESS,\n            content,\n            priority,\n            upsertDate,\n        }\n        const nextTodosData = [...todosData, newTodoData]\n        setTodosData(nextTodosData)\n    }\n\n    const filteredTodosDatas = (function getFilterTodosDatas() {\n        const { prioritySet, statusSet } = filterTodosRules\n\n        const result = todosData.filter(function filterByPriorty(todoData) {\n            const hasCurrentPriority = (function getHasCurrentPriority() {\n                const { priority } = todoData\n\n                const has = prioritySet.has(priority)\n                return has\n            })()\n\n            return hasCurrentPriority\n        }).filter(function filterByTodoStatus(todoData) {\n            const hasCurrentTodoStatus = (function getHasCurrentTodoStatus() {\n                const { todoStatus } = todoData\n\n                const has = statusSet.has(todoStatus)\n                return has\n            })()\n\n            return hasCurrentTodoStatus\n        })\n\n        return result\n    })()\n\n    return <article className='todos'>\n        <h1 className=\"article-heading\">todos</h1>\n        <TodosTeplate\n            form={<InsertTodo\n                onInsert={handleInsert}\n            />}\n            filter={<FilterTodos\n                filterTodosRules={filterTodosRules}\n                onHandleFilter={handleFilter}\n            />}\n        >\n            <TodoItemList\n                todosData={filteredTodosDatas}\n                onHandleUpdateTodoItem={handleUpdateTodoItem}\n            />\n        </TodosTeplate>\n    </article>\n}\n\nexport default Todos","import Todos from './Todos'\nexport default Todos\n","import Todos from \"./components/Todos\"\n\nfunction App() {\n  return (\n    <Todos />\n  )\n}\n\nexport default App\n","import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport reportWebVitals from './reportWebVitals'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}